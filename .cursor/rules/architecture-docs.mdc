---
description: This rule is helpful when the agent wants to know more about the underlying architecture and wants to take a decision based on that. 
globs: 
alwaysApply: false
---
# A17.chat - Comprehensive Architecture & Technology Documentation

## üèóÔ∏è **CORE ARCHITECTURE PRINCIPLES**

### **Technology Stack**
- **Framework**: Next.js 15.1.5 (App Router Architecture)
- **Runtime**: React 19.0.0 with TypeScript 5.7.3
- **Edge Runtime**: Deployed on Vercel Edge for optimal performance
- **Package Manager**: Yarn 1.22.22 (with Bun lockfile support)
- **Build Tool**: Turbopack for development (`--turbopack` flag)

### **AI & Machine Learning Integration**
- **AI SDK**: Vercel AI SDK (`ai` package) for unified LLM interfaces
- **Supported Providers**:
  - **Anthropic**: Claude 3 Opus, Claude 3.5 Sonnet (@ai-sdk/anthropic ^1.1.2)
  - **OpenAI**: GPT-4o, GPT-4o-mini (@ai-sdk/openai ^1.1.2)
  - **Groq**: Llama 3.3 70B Versatile (@ai-sdk/groq ^1.1.2)
  - **DeepSeek**: DeepSeek Chat (@ai-sdk/deepseek ^0.1.2)
- **Streaming**: Real-time AI response streaming using `streamText`
- **Context Windows**: Range from 128k-200k tokens depending on model

### **Database & Persistence**
- **Client-Side Database**: Dexie.js 4.0.11 (IndexedDB wrapper)
- **React Integration**: dexie-react-hooks 1.1.7 for reactive queries
- **Data Structure**: 
  - `chats` table (id, title, created_at, updated_at)
  - `messages` table (id, chatId, content, role, created_at)
- **ID Generation**: nanoid 5.0.9 for collision-resistant IDs

---

## üìÅ **PROJECT STRUCTURE PATTERNS**

### **Next.js App Router Architecture**
```
src/
‚îú‚îÄ‚îÄ app/                    # App Router pages and layouts
‚îÇ   ‚îú‚îÄ‚îÄ api/               # API routes (Edge runtime)
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ chat/          # AI chat endpoint
‚îÇ   ‚îú‚îÄ‚îÄ chat/[id]/         # Dynamic chat pages
‚îÇ   ‚îú‚îÄ‚îÄ layout.tsx         # Root layout with fonts & providers
‚îÇ   ‚îú‚îÄ‚îÄ page.tsx           # Homepage
‚îÇ   ‚îî‚îÄ‚îÄ globals.css        # Global styles
‚îú‚îÄ‚îÄ components/            # React components (feature-based)
‚îÇ   ‚îú‚îÄ‚îÄ chat/              # Chat-specific components
‚îÇ   ‚îú‚îÄ‚îÄ layout/            # Layout components (Navbar, Sidebar)
‚îÇ   ‚îú‚îÄ‚îÄ markdown/          # Markdown rendering components
‚îÇ   ‚îî‚îÄ‚îÄ ui/                # Reusable UI primitives
‚îú‚îÄ‚îÄ hooks/                 # Custom React hooks
‚îú‚îÄ‚îÄ lib/                   # Utilities and configurations
‚îÇ   ‚îú‚îÄ‚îÄ constants/         # Static configurations
‚îÇ   ‚îî‚îÄ‚îÄ db.ts              # Database abstraction
‚îî‚îÄ‚îÄ types/                 # TypeScript type definitions
```

### **Component Architecture Patterns**
- **Feature-Based Organization**: Components grouped by domain (chat, layout, ui)
- **Separation of Concerns**: UI, business logic, and data persistence clearly separated
- **Composition over Inheritance**: Small, composable components
- **Error Boundaries**: Global error handling with ErrorBoundary.tsx

---

## üé® **STYLING & DESIGN SYSTEM**

### **CSS Framework & Methodology**
- **CSS Framework**: Tailwind CSS 3.4.17
- **Design System**: Structured semantic color palette system
- **Typography**: 
  - Primary: Inter font (`--font-inter`)
  - Display: Bricolage Grotesque (`--font-bricolage`)
- **Plugins**: 
  - `tailwind-scrollbar` for custom scrollbars
  - `prettier-plugin-tailwindcss` for class ordering

### **Semantic Color System Structure**
```typescript
colors: {
  // SEMANTIC COLOR MAPPING - Structure to Follow
  background: theme.base,          // Primary background color
  foreground: theme.text,          // Primary text color
  primary: theme.accent1,          // Primary brand/action color
  secondary: theme.surface,        // Secondary background elements
  accent: theme.accent2,           // Highlight/accent color
  muted: theme.overlay,            // Muted text/disabled elements
  border: theme.border,            // Border and separator color
  
  // EXTENDED SEMANTIC PALETTE
  success: theme.success,          // Success states
  warning: theme.warning,          // Warning states
  error: theme.error,              // Error/danger states
  info: theme.info,                // Informational states
}
```

### **Color System Implementation Principles**
- **Semantic Naming**: Use role-based color names rather than descriptive names
- **Consistent Mapping**: Map semantic colors to actual theme colors in tailwind.config.ts
- **Theme Flexibility**: Support multiple color schemes through structured semantic approach
- **Contrast Requirements**: Ensure accessibility standards (WCAG 2.1 AA minimum)

### **Responsive Design**
- **Mobile-First Approach**: Tailwind's responsive utilities
- **Modern UI/UX**: Beautiful, modern interface with best practices
- **Accessibility**: ARIA labels, keyboard navigation, semantic HTML

---

## üîß **DEVELOPMENT CONFIGURATION**

### **TypeScript Configuration**
- **Target**: ES2017 for optimal compatibility
- **Strict Mode**: Enabled for type safety
- **Module Resolution**: Bundler mode for Next.js optimization
- **Path Mapping**: `@/*` points to `./src/*`
- **JSX**: Preserve mode for Next.js transformer

### **Code Quality & Linting**
- **ESLint**: Next.js core-web-vitals + TypeScript rules
- **Prettier**: 80-character width, Tailwind class sorting
- **Unused Variables**: Disabled (`no-unused-vars: off`)
- **Build Validation**: TypeScript and ESLint errors fail builds

### **Next.js Configuration**
```typescript
// next.config.ts patterns
{
  experimental: {
    serverActions: { bodySizeLimit: '2mb' }  // Large context handling
  },
  typescript: { ignoreBuildErrors: false },  // Strict type checking
  eslint: { ignoreDuringBuilds: false },     // Strict linting
  compiler: { 
    removeConsole: process.env.NODE_ENV === "production" 
  },
  reactStrictMode: true,                     // Development safety
  compress: true                             // Gzip compression
}
```

---

## üîê **SECURITY & MIDDLEWARE**

### **Security Headers**
- **HSTS**: `Strict-Transport-Security: max-age=63072000`
- **CORS**: Configured for API routes with specific origins
- **Content Security**: No-store cache control for sensitive endpoints
- **Compression**: Brotli and Gzip encoding support

### **API Security**
- **Environment Variables**: Secure API key management
- **Provider Validation**: Runtime API key validation per provider
- **Edge Runtime**: Reduced attack surface with Edge functions
- **Request Timeout**: 300-second maximum duration
- **Error Sanitization**: Sensitive information filtered from responses

---

## üìä **STATE MANAGEMENT PATTERNS**

### **Chat State Management**
- **Server State**: Vercel AI SDK `useChat` hook for AI interactions
- **Client State**: React useState for UI state
- **Persistent State**: Dexie reactive queries with `useLiveQuery`
- **URL State**: Next.js router for chat navigation

### **Data Flow Architecture**
1. **User Input** ‚Üí React controlled components
2. **State Updates** ‚Üí Custom hooks (usePersistentChat)
3. **API Communication** ‚Üí Vercel AI SDK
4. **Data Persistence** ‚Üí Dexie IndexedDB
5. **UI Updates** ‚Üí Reactive queries + React state

### **Custom Hook Pattern (usePersistentChat)**
```typescript
// Hook responsibilities:
- Chat initialization and routing
- Message persistence to IndexedDB
- AI model communication
- System prompt selection
- Error handling and loading states
- Real-time UI updates via reactive queries
```

---

## ü§ñ **AI INTEGRATION ARCHITECTURE**

### **Model Management**
- **Model Registry**: Centralized configuration in `lib/constants/models.ts`
- **Provider Abstraction**: Unified interface for multiple AI providers
- **Dynamic Loading**: Runtime provider selection based on model choice
- **Context Windows**: Optimized for each model's capabilities

### **System Prompt Management**
- **Prompt Registry**: Structured system prompts in `lib/constants/prompts.ts`
- **Dynamic Selection**: Automatic prompt selection based on user input
- **Prompt Types**:
  - `default`: General assistant
  - `programmer`: Code-focused with best practices
  - `math`: Mathematical tutoring with LaTeX support

### **Streaming Implementation**
- **Real-time Responses**: `streamText` for immediate feedback
- **Performance Monitoring**: Request timing and logging
- **Error Recovery**: Graceful failure handling with user feedback

---

## üì± **USER EXPERIENCE PATTERNS**

### **Chat Interface Design**
- **Sidebar Navigation**: Persistent chat history
- **Real-time Updates**: Live message streaming
- **Responsive Layout**: Mobile-optimized interface
- **Error Handling**: User-friendly error messages with recovery options

### **Performance Optimizations**
- **Edge Runtime**: Sub-100ms response times
- **Incremental Builds**: TypeScript project references
- **Code Splitting**: Automatic Next.js optimizations
- **Image Optimization**: Next.js Image component (when needed)

### **Accessibility Features**
- **Semantic HTML**: Proper heading hierarchy and landmarks
- **Keyboard Navigation**: Full keyboard accessibility
- **Screen Reader Support**: ARIA labels and descriptions
- **High Contrast**: Catppuccin palette accessibility compliance

---

## üîÑ **DEVELOPMENT WORKFLOW**

### **Scripts & Commands**
```json
{
  "dev": "next dev --turbopack",        // Development with Turbopack
  "build": "next build",                // Production build
  "start": "next start",                // Production server
  "lint": "next lint",                  // ESLint checking
  "format": "prettier -w ./src",       // Code formatting
  "test:format": "prettier --check"    // Format validation
}
```

### **Environment Variables Required**
```env
ANTHROPIC_API_KEY=...     # For Claude models
OPENAI_API_KEY=...        # For GPT models  
GROQ_API_KEY=...          # For Llama models
DEEPSEEK_API_KEY=...      # For DeepSeek models
```

### **Git Workflow**
- **Repository**: https://github.com/takitajwar17/A17.chat.git
- **Branching**: Feature-based development
- **Commit Standards**: Conventional commits recommended

---

## üìã **CODING STANDARDS & CONVENTIONS**

### **File Naming Conventions**
- **Components**: PascalCase (e.g., `ChatMessage.tsx`)
- **Hooks**: camelCase with `use` prefix (e.g., `usePersistentChat.ts`)
- **Utils**: camelCase (e.g., `db.ts`, `models.ts`)
- **Types**: camelCase (e.g., `models.ts`, `database.ts`)

### **Import Organization**
1. Third-party libraries
2. Internal utilities and types
3. Components (UI before business logic)
4. Relative imports

### **Comment Standards**
- **JSDoc3 Style**: For functions and classes
- **Inline Comments**: For complex logic explanation
- **TODO Comments**: For future improvements
- **Performance Notes**: For optimization opportunities

### **TypeScript Patterns**
- **Strict Types**: No `any` usage
- **Interface over Type**: For object shapes
- **Const Assertions**: For immutable data
- **Utility Types**: Leverage built-in utilities (Omit, Pick, etc.)

---

## üöÄ **DEPLOYMENT & PRODUCTION**

### **Vercel Deployment**
- **Platform**: Vercel Edge Functions
- **Environment**: Edge Runtime for optimal performance
- **Build Command**: `next build`
- **Output**: Static generation where possible, SSR for dynamic content

### **Performance Monitoring**
- **Logging**: Console-based with performance timing
- **Error Tracking**: Built-in error boundaries
- **Metrics**: Request duration and success rates

### **Production Optimizations**
- **Console Removal**: `removeConsole: true` in production
- **Compression**: Brotli and Gzip enabled
- **Caching**: Appropriate cache headers for static assets
- **Bundle Optimization**: Next.js automatic code splitting

---

## üéØ **FUTURE ARCHITECTURE CONSIDERATIONS**

### **Scalability Patterns**
- **Component Library**: Extract reusable components
- **Micro-frontends**: Module federation for large teams
- **State Management**: Consider Zustand for complex global state
- **Testing**: Add Jest + Testing Library for component testing

### **Performance Enhancements**
- **Winston Logging**: Implement structured logging
- **Monitoring**: Add APM tools (Sentry, DataDog)
- **Caching**: Implement Redis for session management
- **CDN**: Optimize asset delivery

### **Security Enhancements**
- **Rate Limiting**: Implement API rate limiting
- **Authentication**: Add user authentication system
- **Encryption**: Encrypt sensitive data at rest
- **Audit Logging**: Track user actions and system events

---


This architecture documentation should be used as the foundation for all development decisions in the A17.chat project. All new features should follow these established patterns and conventions to maintain consistency and code quality. 